{"ast":null,"code":"export function createUser(userData) {\n  return new Promise(async resolve => {\n    const response = await fetch('http://localhost:8080/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({\n      data\n    });\n  });\n}\nexport function checkUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    const email = loginInfo.email;\n    const password = loginInfo.password;\n    const response = await fetch('http://localhost:8080/users?email=' + email);\n    const data = await response.json();\n    console.log({\n      data\n    });\n    if (data.length) {\n      if (password === data[0].password) {\n        resolve({\n          data: data[0]\n        });\n      } else {\n        reject({\n          message: 'wrong credentials'\n        });\n      }\n    } else {\n      reject({\n        message: 'user not found'\n      });\n    }\n    // TODO: on server it will only return some info of user (not password)\n  });\n}","map":{"version":3,"names":["createUser","userData","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","checkUser","loginInfo","reject","email","password","console","log","length","message"],"sources":["D:/Project/agromart/src/features/auth/authAPI.js"],"sourcesContent":["export function createUser(userData) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\nexport function checkUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    const email = loginInfo.email;\n    const password = loginInfo.password;\n    const response = await fetch('http://localhost:8080/users?email=' + email);\n    const data = await response.json();\n    console.log({data})\n    if (data.length) {\n      if (password === data[0].password) {\n        resolve({ data: data[0] });\n      } else {\n        reject({ message: 'wrong credentials' });\n      }\n    } else {\n      reject({ message: 'user not found' });\n    }\n    // TODO: on server it will only return some info of user (not password)\n  });\n}\n\n\n"],"mappings":"AAAA,OAAO,SAASA,UAAUA,CAACC,QAAQ,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC;MAC9BS,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC;IACAT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASE,SAASA,CAACC,SAAS,EAAE;EACnC,OAAO,IAAIZ,OAAO,CAAC,OAAOC,OAAO,EAAEY,MAAM,KAAK;IAC5C,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK;IAC7B,MAAMC,QAAQ,GAAGH,SAAS,CAACG,QAAQ;IACnC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,GAAGW,KAAK,CAAC;IAC1E,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCM,OAAO,CAACC,GAAG,CAAC;MAACR;IAAI,CAAC,CAAC;IACnB,IAAIA,IAAI,CAACS,MAAM,EAAE;MACf,IAAIH,QAAQ,KAAKN,IAAI,CAAC,CAAC,CAAC,CAACM,QAAQ,EAAE;QACjCd,OAAO,CAAC;UAAEQ,IAAI,EAAEA,IAAI,CAAC,CAAC;QAAE,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLI,MAAM,CAAC;UAAEM,OAAO,EAAE;QAAoB,CAAC,CAAC;MAC1C;IACF,CAAC,MAAM;MACLN,MAAM,CAAC;QAAEM,OAAO,EAAE;MAAiB,CAAC,CAAC;IACvC;IACA;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}