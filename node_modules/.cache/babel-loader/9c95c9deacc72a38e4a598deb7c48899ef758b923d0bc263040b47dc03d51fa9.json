{"ast":null,"code":"export function addToCart(item) {\n  return new Promise(async resolve => {\n    const response = await fetch('http://localhost:8080/cart', {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({\n      data\n    });\n  });\n}\nexport function fetchItemsByUserId(userId) {\n  return new Promise(async resolve => {\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/cart?user=' + userId);\n    const data = await response.json();\n    resolve({\n      data\n    });\n  });\n}\nexport function updateCart(update) {\n  return new Promise(async resolve => {\n    const response = await fetch('http://localhost:8080/cart/' + update.id, {\n      method: 'PATCH',\n      body: JSON.stringify(update),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({\n      data\n    });\n  });\n}\nexport function deleteItemFromCart(itemId) {\n  return new Promise(async resolve => {\n    const response = await fetch('http://localhost:8080/cart/' + itemId, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({\n      data: {\n        id: itemId\n      }\n    });\n  });\n}\nexport function resetCart(userId) {\n  // get all items of user's cart - and then delete each\n  return new Promise(async resolve => {\n    const response = await fetchItemsByUserId(userId);\n    const items = response.data;\n    for (let item of items) {\n      await deleteItemFromCart(item.id);\n    }\n    resolve({\n      status: 'success'\n    });\n  });\n}","map":{"version":3,"names":["addToCart","item","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","fetchItemsByUserId","userId","updateCart","update","id","deleteItemFromCart","itemId","resetCart","items","status"],"sources":["D:/Majorproject/agromart/src/features/cart/cartAPI.js"],"sourcesContent":["export function addToCart(item) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart', {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\nexport function fetchItemsByUserId(userId) {\n  return new Promise(async (resolve) => {\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/cart?user=' + userId);\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function updateCart(update) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart/' + update.id, {\n      method: 'PATCH',\n      body: JSON.stringify(update),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\n\nexport function deleteItemFromCart(itemId) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart/' + itemId, {\n      method: 'DELETE',\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data: { id: itemId } });\n  });\n}\n\nexport function resetCart(userId) {\n  // get all items of user's cart - and then delete each\n  return new Promise(async (resolve) => {\n    const response = await fetchItemsByUserId(userId);\n    const items = response.data;\n    for (let item of items) {\n      await deleteItemFromCart(item.id);\n    }\n    resolve({ status: 'success' });\n  });\n}"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAE;EAC9B,OAAO,IAAIC,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MACzDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC;MAC1BS,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC;IACAT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASE,kBAAkBA,CAACC,MAAM,EAAE;EACzC,OAAO,IAAIZ,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,GAAGS,MAAM,CAAC;IACzE,MAAMH,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASI,UAAUA,CAACC,MAAM,EAAE;EACjC,OAAO,IAAId,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,GAAGW,MAAM,CAACC,EAAE,EAAE;MACtEX,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,MAAM,CAAC;MAC5BN,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC;IACAT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAGA,OAAO,SAASO,kBAAkBA,CAACC,MAAM,EAAE;EACzC,OAAO,IAAIjB,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,GAAGc,MAAM,EAAE;MACnEb,MAAM,EAAE,QAAQ;MAChBI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC;IACAT,OAAO,CAAC;MAAEQ,IAAI,EAAE;QAAEM,EAAE,EAAEE;MAAO;IAAE,CAAC,CAAC;EACnC,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,SAASA,CAACN,MAAM,EAAE;EAChC;EACA,OAAO,IAAIZ,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMS,kBAAkB,CAACC,MAAM,CAAC;IACjD,MAAMO,KAAK,GAAGjB,QAAQ,CAACO,IAAI;IAC3B,KAAK,IAAIV,IAAI,IAAIoB,KAAK,EAAE;MACtB,MAAMH,kBAAkB,CAACjB,IAAI,CAACgB,EAAE,CAAC;IACnC;IACAd,OAAO,CAAC;MAAEmB,MAAM,EAAE;IAAU,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}