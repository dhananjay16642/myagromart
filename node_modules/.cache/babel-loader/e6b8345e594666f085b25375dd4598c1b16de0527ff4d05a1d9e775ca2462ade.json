{"ast":null,"code":"import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{fetchCount}from'./contactAPI';const initialState={status:'idle'};export const incrementAsync=createAsyncThunk('counter/fetchCount',async amount=>{const response=await fetchCount(amount);// The value we return becomes the `fulfilled` action payload\nreturn response.data;});export const contactSlice=createSlice({name:'counter',initialState,reducers:{increment:state=>{state.value+=1;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:builder=>{builder.addCase(incrementAsync.pending,state=>{state.status='loading';}).addCase(incrementAsync.fulfilled,(state,action)=>{state.status='idle';state.value+=action.payload;});}});export default contactSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","status","incrementAsync","amount","response","data","contactSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","payload","reducer"],"sources":["D:/Majorproject/agromart/src/features/contact/contactSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './contactAPI';\n\nconst initialState = {\n  status: 'idle',\n\n};\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const contactSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    \n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\n\n\nexport default contactSlice.reducer;\n"],"mappings":"AAAA,OAASA,gBAAgB,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,UAAU,KAAQ,cAAc,CAEzC,KAAM,CAAAC,YAAY,CAAG,CACnBC,MAAM,CAAE,MAEV,CAAC,CAED,MAAO,MAAM,CAAAC,cAAc,CAAGL,gBAAgB,CAC5C,oBAAoB,CACpB,KAAO,CAAAM,MAAM,EAAK,CAChB,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,UAAU,CAACI,MAAM,CAAC,CACzC;AACA,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAGR,WAAW,CAAC,CACtCS,IAAI,CAAE,SAAS,CACfP,YAAY,CACZQ,QAAQ,CAAE,CACRC,SAAS,CAAGC,KAAK,EAAK,CACpBA,KAAK,CAACC,KAAK,EAAI,CAAC,CAClB,CAEF,CAAC,CACD;AACA;AACAC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAACZ,cAAc,CAACa,OAAO,CAAGL,KAAK,EAAK,CAC1CA,KAAK,CAACT,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACDa,OAAO,CAACZ,cAAc,CAACc,SAAS,CAAE,CAACN,KAAK,CAAEO,MAAM,GAAK,CACpDP,KAAK,CAACT,MAAM,CAAG,MAAM,CACrBS,KAAK,CAACC,KAAK,EAAIM,MAAM,CAACC,OAAO,CAC/B,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAIF,cAAe,CAAAZ,YAAY,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}