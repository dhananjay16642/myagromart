{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { checkUser, createUser } from './authAPI';\nconst initialState = {\n  loggedInUser: null,\n  status: 'idle',\n  error: null\n};\nexport const createUserAsync = createAsyncThunk('user/createUser', async userData => {\n  const response = await createUser(userData);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const checkUserAsync = createAsyncThunk('user/checkUser', async loginInfo => {\n  const response = await checkUser(loginInfo);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createUserAsync.pending, state => {\n      state.status = 'loading';\n    });\n    addCase(createUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUser = action.payload;\n    }).addCase(checkUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(checkUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUser = action.payload;\n    }).addCase(checkUserAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      state.error = action.error;\n    });\n  }\n});\nexport const selectLoggedInUser = state => state.auth.loggedInUser;\nexport const selectError = state => state.auth.error;\nexport const {\n  increment\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","checkUser","createUser","initialState","loggedInUser","status","error","createUserAsync","userData","response","data","checkUserAsync","loginInfo","counterSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","selectLoggedInUser","auth","selectError","actions","reducer"],"sources":["D:/Project/agromart/src/features/auth/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { checkUser, createUser } from './authAPI';\n\nconst initialState = {\n  loggedInUser: null,\n  status: 'idle',\n  error:null\n};\n\nexport const createUserAsync = createAsyncThunk(\n  'user/createUser',\n  async (userData) => {\n    const response = await createUser(userData);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const checkUserAsync = createAsyncThunk(\n  'user/checkUser',\n  async (loginInfo) => {\n    const response = await checkUser(loginInfo);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n    .addCase(createUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      addCase(createUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUser = action.payload;\n      })\n      .addCase(checkUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(checkUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUser = action.payload;\n      })\n      .addCase(checkUserAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.error = action.error;\n      })\n  },\n});\n\nexport const selectLoggedInUser = (state)=>state.auth.loggedInUser;\nexport const selectError = (state)=>state.auth.error;\n\nexport const { increment } = counterSlice.actions;\n\nexport default counterSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,EAAEC,UAAU,QAAQ,WAAW;AAEjD,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,IAAI;EAClBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAC;AACR,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGR,gBAAgB,CAC7C,iBAAiB,EACjB,MAAOS,QAAQ,IAAK;EAClB,MAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACM,QAAQ,CAAC;EAC3C;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGZ,gBAAgB,CAC5C,gBAAgB,EAChB,MAAOa,SAAS,IAAK;EACnB,MAAMH,QAAQ,GAAG,MAAMR,SAAS,CAACW,SAAS,CAAC;EAC3C;EACA,OAAOH,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,MAAM;EACZX,YAAY;EACZY,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACNC,OAAO,CAACd,eAAe,CAACe,OAAO,EAAGL,KAAK,IAAK;MACzCA,KAAK,CAACZ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFgB,OAAO,CAACd,eAAe,CAACgB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACpDP,KAAK,CAACZ,MAAM,GAAG,MAAM;MACrBY,KAAK,CAACb,YAAY,GAAGoB,MAAM,CAACC,OAAO;IACrC,CAAC,CAAC,CACDJ,OAAO,CAACV,cAAc,CAACW,OAAO,EAAGL,KAAK,IAAK;MAC1CA,KAAK,CAACZ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACV,cAAc,CAACY,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACpDP,KAAK,CAACZ,MAAM,GAAG,MAAM;MACrBY,KAAK,CAACb,YAAY,GAAGoB,MAAM,CAACC,OAAO;IACrC,CAAC,CAAC,CACDJ,OAAO,CAACV,cAAc,CAACe,QAAQ,EAAE,CAACT,KAAK,EAAEO,MAAM,KAAK;MACnDP,KAAK,CAACZ,MAAM,GAAG,MAAM;MACrBY,KAAK,CAACX,KAAK,GAAGkB,MAAM,CAAClB,KAAK;IAC5B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMqB,kBAAkB,GAAIV,KAAK,IAAGA,KAAK,CAACW,IAAI,CAACxB,YAAY;AAClE,OAAO,MAAMyB,WAAW,GAAIZ,KAAK,IAAGA,KAAK,CAACW,IAAI,CAACtB,KAAK;AAEpD,OAAO,MAAM;EAAEU;AAAU,CAAC,GAAGH,YAAY,CAACiB,OAAO;AAEjD,eAAejB,YAAY,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}