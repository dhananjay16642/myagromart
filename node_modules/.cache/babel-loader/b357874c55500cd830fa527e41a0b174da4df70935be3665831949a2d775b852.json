{"ast":null,"code":"import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{createOrder,fetchAllOrders,updateOrder}from'./orderAPI';const initialState={orders:[],status:'idle',currentOrder:null,totalOrders:0};export const createOrderAsync=createAsyncThunk('order/createOrder',async order=>{const response=await createOrder(order);// The value we return becomes the `fulfilled` action payload\nreturn response.data;});export const updateOrderAsync=createAsyncThunk('order/updateOrder',async order=>{const response=await updateOrder(order);// The value we return becomes the `fulfilled` action payload\nreturn response.data;});export const fetchAllOrdersAsync=createAsyncThunk('order/fetchAllOrders',async _ref=>{let{sort,pagination}=_ref;const response=await fetchAllOrders(sort,pagination);// The value we return becomes the `fulfilled` action payload\nreturn response.data;});export const orderSlice=createSlice({name:'order',initialState,reducers:{resetOrder:state=>{state.currentOrder=null;}},extraReducers:builder=>{builder.addCase(createOrderAsync.pending,state=>{state.status='loading';}).addCase(createOrderAsync.fulfilled,(state,action)=>{state.status='idle';state.orders.push(action.payload);state.currentOrder=action.payload;}).addCase(fetchAllOrdersAsync.pending,state=>{state.status='loading';}).addCase(fetchAllOrdersAsync.fulfilled,(state,action)=>{state.status='idle';state.orders=action.payload.orders;state.totalOrders=action.payload.totalOrders;}).addCase(updateOrderAsync.pending,state=>{state.status='loading';}).addCase(updateOrderAsync.fulfilled,(state,action)=>{state.status='idle';const index=state.orders.findIndex(order=>order.id===action.payload.id);state.orders[index]=action.payload;});}});export const{resetOrder}=orderSlice.actions;export const selectCurrentOrder=state=>state.order.currentOrder;export const selectOrders=state=>state.order.orders;export const selectTotalOrders=state=>state.order.totalOrders;export default orderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","fetchAllOrders","updateOrder","initialState","orders","status","currentOrder","totalOrders","createOrderAsync","order","response","data","updateOrderAsync","fetchAllOrdersAsync","_ref","sort","pagination","orderSlice","name","reducers","resetOrder","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","index","findIndex","id","actions","selectCurrentOrder","selectOrders","selectTotalOrders","reducer"],"sources":["D:/Majorproject/agromart/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder, fetchAllOrders,updateOrder } from './orderAPI';\n\nconst initialState = {\n  orders: [],\n  status: 'idle',\n  currentOrder: null,\n  totalOrders: 0\n};\n\nexport const createOrderAsync = createAsyncThunk(\n  'order/createOrder',\n  async (order) => {\n    const response = await createOrder(order);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const updateOrderAsync = createAsyncThunk(\n  'order/updateOrder',\n  async (order) => {\n    const response = await updateOrder(order);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchAllOrdersAsync = createAsyncThunk(\n  'order/fetchAllOrders',\n  async ({sort, pagination}) => {\n    const response = await fetchAllOrders(sort,pagination);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    resetOrder: (state) => {\n      state.currentOrder = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.orders.push(action.payload);\n        state.currentOrder = action.payload;\n      })\n      .addCase(fetchAllOrdersAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.orders = action.payload.orders;\n        state.totalOrders = action.payload.totalOrders;\n      })\n      .addCase(updateOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        const index =  state.orders.findIndex(order=>order.id===action.payload.id)\n        state.orders[index] = action.payload;\n      })\n  },\n});\n\nexport const { resetOrder } = orderSlice.actions;\n\nexport const selectCurrentOrder = (state) => state.order.currentOrder;\nexport const selectOrders = (state) => state.order.orders;\nexport const selectTotalOrders = (state) => state.order.totalOrders;\n\nexport default orderSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}