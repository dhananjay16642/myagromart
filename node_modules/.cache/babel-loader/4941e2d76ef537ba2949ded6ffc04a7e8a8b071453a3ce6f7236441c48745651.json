{"ast":null,"code":"export function fetchAllProducts(){return new Promise(async resolve=>{//TODO: we will not hard-code server URL here\nconst response=await fetch('http://localhost:8080/products');const data=await response.json();resolve({data});});}export function fetchProductById(id){return new Promise(async resolve=>{//TODO: we will not hard-code server URL here\nconst response=await fetch('http://localhost:8080/products/'+id);const data=await response.json();resolve({data});});}export function createProduct(product){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/products/',{method:'POST',body:JSON.stringify(product),headers:{'content-type':'application/json'}});const data=await response.json();resolve({data});});}export function updateProduct(update){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/products/'+update.id,{method:'PATCH',body:JSON.stringify(update),headers:{'content-type':'application/json'}});const data=await response.json();// TODO: on server it will only return some info of user (not password)\nresolve({data});});}export function fetchProductsByFilters(filter,sort,pagination){// filter = {\"category\":[\"smartphone\",\"laptops\"]}\n// sort = {_sort:\"price\",_order=\"desc\"}\n// pagination = {_page:1,_limit=10} \n// TODO : on server we will support multi values in filter\n// TODO : Server will filter deleted products in case of non-admin\nlet queryString='';for(let key in filter){const categoryValues=filter[key];if(categoryValues.length){const lastCategoryValue=categoryValues[categoryValues.length-1];queryString+=\"\".concat(key,\"=\").concat(lastCategoryValue,\"&\");}}for(let key in sort){queryString+=\"\".concat(key,\"=\").concat(sort[key],\"&\");}console.log(pagination);for(let key in pagination){queryString+=\"\".concat(key,\"=\").concat(pagination[key],\"&\");}return new Promise(async resolve=>{//TODO: we will not hard-code server URL here\nconst response=await fetch('http://localhost:8080/products?'+queryString);const data=await response.json();const totalItems=await response.headers.get('X-Total-Count');resolve({data:{products:data,totalItems:+totalItems}});});}export function fetchCategories(){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/categories');const data=await response.json();resolve({data});});}export function fetchBrands(){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/brands');const data=await response.json();resolve({data});});}","map":{"version":3,"names":["fetchAllProducts","Promise","resolve","response","fetch","data","json","fetchProductById","id","createProduct","product","method","body","JSON","stringify","headers","updateProduct","update","fetchProductsByFilters","filter","sort","pagination","queryString","key","categoryValues","length","lastCategoryValue","concat","console","log","totalItems","get","products","fetchCategories","fetchBrands"],"sources":["D:/Majorproject/agromart/src/features/product/productAPI.js"],"sourcesContent":["export function fetchAllProducts() {\n  return new Promise(async (resolve) => {\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/products') \n    const data = await response.json()\n    resolve({data})\n  }\n  );\n}\n\nexport function fetchProductById(id) {\n  return new Promise(async (resolve) => {\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/products/' + id);\n    const data = await response.json();\n    resolve({ data });\n  });\n} \n\nexport function createProduct(product) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/products/', {\n      method: 'POST',\n      body: JSON.stringify(product),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function updateProduct(update) {\n  return new Promise(async (resolve) => {\n    const response = await fetch(\n      'http://localhost:8080/products/' + update.id,\n      {\n        method: 'PATCH',\n        body: JSON.stringify(update),\n        headers: { 'content-type': 'application/json' },\n      }\n    );\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\nexport function fetchProductsByFilters(filter,sort,pagination) {\n  // filter = {\"category\":[\"smartphone\",\"laptops\"]}\n  // sort = {_sort:\"price\",_order=\"desc\"}\n  // pagination = {_page:1,_limit=10} \n  // TODO : on server we will support multi values in filter\n  // TODO : Server will filter deleted products in case of non-admin\n  let queryString = '';\n  for(let key in filter){\n    const categoryValues = filter[key];\n    if (categoryValues.length) {\n      const lastCategoryValue = categoryValues[categoryValues.length - 1];\n      queryString += `${key}=${lastCategoryValue}&`;\n    }\n  }\n  for (let key in sort) {\n    queryString += `${key}=${sort[key]}&`;\n  }\n\n  console.log(pagination);\n  for (let key in pagination) {\n    queryString += `${key}=${pagination[key]}&`;\n  }\n\n\n  return new Promise(async (resolve) =>{\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/products?'+queryString) \n    const data = await response.json()\n    const totalItems = await response.headers.get('X-Total-Count')\n    resolve({data:{products:data,totalItems:+totalItems}})\n  }\n  );\n}\n\nexport function fetchCategories() {\n  return new Promise(async (resolve) =>{\n    const response = await fetch('http://localhost:8080/categories') \n    const data = await response.json()\n    resolve({data})\n  }\n  );\n}\n\nexport function fetchBrands() {\n  return new Promise(async (resolve) =>{\n    const response = await fetch('http://localhost:8080/brands') \n    const data = await response.json()\n    resolve({data})\n  }\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}