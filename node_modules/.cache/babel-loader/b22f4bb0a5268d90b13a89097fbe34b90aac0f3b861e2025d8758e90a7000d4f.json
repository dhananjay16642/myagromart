{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchLoggedInUserOrders } from './userAPI';\nconst initialState = {\n  userOrders: [],\n  status: 'idle'\n};\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk('user/fetchLoggedInUser', async id => {\n  const response = await fetchLoggedInUserOrders(id);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchLoggedInUserOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      // this info can be different or more from logged-in User info\n      state.userOrders = action.payload;\n    });\n  }\n});\nexport const selectUserOrders = state => state.user.userOrders;\nexport const {\n  increment\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchLoggedInUserOrders","initialState","userOrders","status","fetchLoggedInUserOrderAsync","id","response","data","userSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","payload","selectUserOrders","user","actions","reducer"],"sources":["D:/Project/agromart/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchLoggedInUserOrders } from './userAPI';\n\nconst initialState = {\n  userOrders: [],\n  status: 'idle',\n};\n\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk(\n  'user/fetchLoggedInUser',\n  async (id) => {\n    const response = await fetchLoggedInUserOrders(id);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchLoggedInUserOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        // this info can be different or more from logged-in User info\n        state.userOrders = action.payload;\n      });\n  },\n});\n\nexport const selectUserOrders = (state)=>state.user.userOrders;\n\nexport const { increment } = userSlice.actions;\n\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,uBAAuB,QAAQ,WAAW;AAEnD,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,EAAE;EACdC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAGN,gBAAgB,CACzD,wBAAwB,EACxB,MAAOO,EAAE,IAAK;EACZ,MAAMC,QAAQ,GAAG,MAAMN,uBAAuB,CAACK,EAAE,CAAC;EAClD;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;EACnCU,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,2BAA2B,CAACa,OAAO,EAAGL,KAAK,IAAK;MACvDA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACZ,2BAA2B,CAACc,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACjEP,KAAK,CAACT,MAAM,GAAG,MAAM;MACrB;MACAS,KAAK,CAACV,UAAU,GAAGiB,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAIT,KAAK,IAAGA,KAAK,CAACU,IAAI,CAACpB,UAAU;AAE9D,OAAO,MAAM;EAAES;AAAU,CAAC,GAAGH,SAAS,CAACe,OAAO;AAE9C,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}