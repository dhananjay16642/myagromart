{"ast":null,"code":"export function createUser(userData){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/users',{method:'POST',body:JSON.stringify(userData),headers:{'content-type':'application/json'}});const data=await response.json();// TODO: on server it will only return some info of user (not password)\nresolve({data});});}export function checkUser(loginInfo){return new Promise(async(resolve,reject)=>{const email=loginInfo.email;const password=loginInfo.password;const response=await fetch('http://localhost:8080/users?email='+email);const data=await response.json();console.log({data});if(data.length){if(password===data[0].password){resolve({data:data[0]});}else{reject({message:'wrong credentials'});}}else{reject({message:'user not found'});}// TODO: on server it will only return some info of user (not password)\n});}export function signOut(userId){return new Promise(async resolve=>{// TODO: on server we will remove user session info\nresolve({data:'success'});});}","map":{"version":3,"names":["createUser","userData","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","checkUser","loginInfo","reject","email","password","console","log","length","message","signOut","userId"],"sources":["D:/Majorproject/agromart/src/features/auth/authAPI.js"],"sourcesContent":["export function createUser(userData) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\nexport function checkUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    const email = loginInfo.email;\n    const password = loginInfo.password;\n    const response = await fetch('http://localhost:8080/users?email=' + email);\n    const data = await response.json();\n    console.log({data})\n    if (data.length) {\n      if (password === data[0].password) {\n        resolve({ data: data[0] });\n      } else {\n        reject({ message: 'wrong credentials' });\n      }\n    } else {\n      reject({ message: 'user not found' });\n    }\n    // TODO: on server it will only return some info of user (not password)\n  });\n}\n\nexport function signOut(userId) {\n  return new Promise(async (resolve) => {\n    // TODO: on server we will remove user session info\n    resolve({ data: 'success' });\n  });\n}\n\n"],"mappings":"AAAA,MAAO,SAAS,CAAAA,UAAUA,CAACC,QAAQ,CAAE,CACnC,MAAO,IAAI,CAAAC,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAE,CAC1DC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAC9BS,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC;AACAT,OAAO,CAAC,CAAEQ,IAAK,CAAC,CAAC,CACnB,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAE,SAASA,CAACC,SAAS,CAAE,CACnC,MAAO,IAAI,CAAAZ,OAAO,CAAC,MAAOC,OAAO,CAAEY,MAAM,GAAK,CAC5C,KAAM,CAAAC,KAAK,CAAGF,SAAS,CAACE,KAAK,CAC7B,KAAM,CAAAC,QAAQ,CAAGH,SAAS,CAACG,QAAQ,CACnC,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAGW,KAAK,CAAC,CAC1E,KAAM,CAAAL,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCM,OAAO,CAACC,GAAG,CAAC,CAACR,IAAI,CAAC,CAAC,CACnB,GAAIA,IAAI,CAACS,MAAM,CAAE,CACf,GAAIH,QAAQ,GAAKN,IAAI,CAAC,CAAC,CAAC,CAACM,QAAQ,CAAE,CACjCd,OAAO,CAAC,CAAEQ,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAC5B,CAAC,IAAM,CACLI,MAAM,CAAC,CAAEM,OAAO,CAAE,mBAAoB,CAAC,CAAC,CAC1C,CACF,CAAC,IAAM,CACLN,MAAM,CAAC,CAAEM,OAAO,CAAE,gBAAiB,CAAC,CAAC,CACvC,CACA;AACF,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAC,OAAOA,CAACC,MAAM,CAAE,CAC9B,MAAO,IAAI,CAAArB,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC;AACAA,OAAO,CAAC,CAAEQ,IAAI,CAAE,SAAU,CAAC,CAAC,CAC9B,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}