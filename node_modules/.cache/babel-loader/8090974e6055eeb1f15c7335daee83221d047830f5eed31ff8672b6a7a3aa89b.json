{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder } from './orderAPI';\nconst initialState = {\n  orders: [],\n  status: 'idle'\n};\nexport const createOrderAsync = createAsyncThunk('order/createOrder', async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.orders.push(action.payload);\n    });\n  }\n});\nexport const {\n  increment\n} = counterSlice.actions;\n\n// export const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","initialState","orders","status","createOrderAsync","order","response","data","counterSlice","name","reducers","increment","state","value","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","actions","reducer"],"sources":["D:/Project/agromart/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder } from './orderAPI';\n\nconst initialState = {\n  orders: [],\n  status: 'idle',\n};\n\nexport const createOrderAsync = createAsyncThunk(\n  'order/createOrder',\n  async (order) => {\n    const response = await createOrder(order);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.orders.push(action.payload);\n      });\n  },\n});\n\nexport const { increment } = counterSlice.actions;\n\n// export const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGN,gBAAgB,CAC9C,mBAAmB,EACnB,MAAOO,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMN,WAAW,CAACK,KAAK,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,OAAO;EACbR,YAAY;EACZS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,gBAAgB,CAACa,OAAO,EAAGL,KAAK,IAAK;MAC5CA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACZ,gBAAgB,CAACc,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACtDP,KAAK,CAACT,MAAM,GAAG,MAAM;MACrBS,KAAK,CAACV,MAAM,CAACkB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACnC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAU,CAAC,GAAGH,YAAY,CAACc,OAAO;;AAEjD;;AAEA,eAAed,YAAY,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}