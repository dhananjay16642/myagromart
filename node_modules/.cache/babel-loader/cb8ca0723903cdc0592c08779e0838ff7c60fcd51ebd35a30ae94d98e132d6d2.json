{"ast":null,"code":"export function addToCart(item){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/cart',{method:'POST',body:JSON.stringify(item),headers:{'content-type':'application/json'}});const data=await response.json();// TODO: on server it will only return some info of user (not password)\nresolve({data});});}export function fetchItemsByUserId(userId){return new Promise(async resolve=>{//TODO: we will not hard-code server URL here\nconst response=await fetch('http://localhost:8080/cart?user='+userId);const data=await response.json();resolve({data});});}export function updateCart(update){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/cart/'+update.id,{method:'PATCH',body:JSON.stringify(update),headers:{'content-type':'application/json'}});const data=await response.json();// TODO: on server it will only return some info of user (not password)\nresolve({data});});}export function deleteItemFromCart(itemId){return new Promise(async resolve=>{const response=await fetch('http://localhost:8080/cart/'+itemId,{method:'DELETE',headers:{'content-type':'application/json'}});const data=await response.json();// TODO: on server it will only return some info of user (not password)\nresolve({data:{id:itemId}});});}export function resetCart(userId){// get all items of user's cart - and then delete each\nreturn new Promise(async resolve=>{const response=await fetchItemsByUserId(userId);const items=response.data;for(let item of items){await deleteItemFromCart(item.id);}resolve({status:'success'});});}","map":{"version":3,"names":["addToCart","item","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","fetchItemsByUserId","userId","updateCart","update","id","deleteItemFromCart","itemId","resetCart","items","status"],"sources":["D:/Majorproject/agromart/src/features/cart/cartAPI.js"],"sourcesContent":["export function addToCart(item) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart', {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\nexport function fetchItemsByUserId(userId) {\n  return new Promise(async (resolve) => {\n    //TODO: we will not hard-code server URL here\n    const response = await fetch('http://localhost:8080/cart?user=' + userId);\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function updateCart(update) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart/' + update.id, {\n      method: 'PATCH',\n      body: JSON.stringify(update),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data });\n  });\n}\n\n\nexport function deleteItemFromCart(itemId) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('http://localhost:8080/cart/' + itemId, {\n      method: 'DELETE',\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    // TODO: on server it will only return some info of user (not password)\n    resolve({ data: { id: itemId } });\n  });\n}\n\nexport function resetCart(userId) {\n  // get all items of user's cart - and then delete each\n  return new Promise(async (resolve) => {\n    const response = await fetchItemsByUserId(userId);\n    const items = response.data;\n    for (let item of items) {\n      await deleteItemFromCart(item.id);\n    }\n    resolve({ status: 'success' });\n  });\n}"],"mappings":"AAAA,MAAO,SAAS,CAAAA,SAASA,CAACC,IAAI,CAAE,CAC9B,MAAO,IAAI,CAAAC,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,4BAA4B,CAAE,CACzDC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAC1BS,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC;AACAT,OAAO,CAAC,CAAEQ,IAAK,CAAC,CAAC,CACnB,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAE,kBAAkBA,CAACC,MAAM,CAAE,CACzC,MAAO,IAAI,CAAAZ,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAGS,MAAM,CAAC,CACzE,KAAM,CAAAH,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCT,OAAO,CAAC,CAAEQ,IAAK,CAAC,CAAC,CACnB,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAI,UAAUA,CAACC,MAAM,CAAE,CACjC,MAAO,IAAI,CAAAd,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAGW,MAAM,CAACC,EAAE,CAAE,CACtEX,MAAM,CAAE,OAAO,CACfC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACO,MAAM,CAAC,CAC5BN,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC;AACAT,OAAO,CAAC,CAAEQ,IAAK,CAAC,CAAC,CACnB,CAAC,CAAC,CACJ,CAGA,MAAO,SAAS,CAAAO,kBAAkBA,CAACC,MAAM,CAAE,CACzC,MAAO,IAAI,CAAAjB,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAGc,MAAM,CAAE,CACnEb,MAAM,CAAE,QAAQ,CAChBI,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC;AACAT,OAAO,CAAC,CAAEQ,IAAI,CAAE,CAAEM,EAAE,CAAEE,MAAO,CAAE,CAAC,CAAC,CACnC,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAC,SAASA,CAACN,MAAM,CAAE,CAChC;AACA,MAAO,IAAI,CAAAZ,OAAO,CAAC,KAAO,CAAAC,OAAO,EAAK,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAS,kBAAkB,CAACC,MAAM,CAAC,CACjD,KAAM,CAAAO,KAAK,CAAGjB,QAAQ,CAACO,IAAI,CAC3B,IAAK,GAAI,CAAAV,IAAI,GAAI,CAAAoB,KAAK,CAAE,CACtB,KAAM,CAAAH,kBAAkB,CAACjB,IAAI,CAACgB,EAAE,CAAC,CACnC,CACAd,OAAO,CAAC,CAAEmB,MAAM,CAAE,SAAU,CAAC,CAAC,CAChC,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}